#%RAML 1.0 Extension

extends: https://raw.githubusercontent.com/VEuPathDB/docs-api-schema/v2.0.2/libraries/base-service.raml

title: EDA Workspace Data Service API
version: v1.0.0
mediaType: application/json

uses:
  error: https://raw.githubusercontent.com/VEuPathDB/docs-api-schema/v2.0.2/libraries/errors.raml
  lib: schema/library.raml

# TODO: THIS SHOULD BE HEADER
securitySchemes:
  header-auth:
    description: Authentication based on a WDK auth cookie.
    type:
      x-custom
    describedBy:
      headers:
        Auth_Key:
          description: Authorization header.
          type: string

####################################
# Data Service Specific Endpoints
####################################

/apps:
  displayName: Available Apps
  get:
    responses:
      200:
        body:
          application/json:
            type: lib.AppsGetResponse

  /pass/visualizations:
    displayName: Available visualizations for the null/ pass-through app

    /map-markers:
      post:
        description: Returns data required to make MapVeu markers <br> Java impl- working <br> R impl- NA
        body:
          application/json:
            type: lib.MapPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.MapPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /table:
      post:
        description: Return a tabular report of one or more variables. In the request, `filters` must be a subclass of [Filter](#type:lib.Filter)
        body:
          application/json:
            type: lib.TablePostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.TablePostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /scatterplot:
      post:
        description: Returns data required to create a scatterplot visualization <br> Java impl- NA <br> R impl- working
        body:
          application/json:
            type: lib.ScatterplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.ScatterplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /densityplot:
      post:
        description: Returns data required to create a densityplot visualization <br> Java impl- NA <br> R impl- drafted, passing unit tests, not confirmed working
        body:
          application/json:
            type: lib.DensityplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.DensityplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /lineplot:
      post:
        description: Returns data required to create a lineplot visualization <br> Java impl- NA <br> R impl- working
        body:
          application/json:
            type: lib.LineplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.LineplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /histogram:
      post:
        description: Returns data required to create a histogram visualization. <br> Java impl- NA <br> R impl- working
        body:
          application/json:
            type: lib.HistogramPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.HistogramPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /boxplot:
      post:
        description: Returns data required to create a boxplot visualization <br> Java impl- NA <br> R impl- working
        body:
          application/json:
            type: lib.BoxplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.BoxplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /heatmap:
      post:
        description: Returns data required to create a heatmap visualization <br> Java impl- NA <br> R impl- drafted
        body:
          application/json:
            type: lib.HeatmapPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.HeatmapPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /barplot:
      post:
        description: Returns data required to create a bar or pie plot visualization <br> Java impl- drafted, not working <br> R impl- working
        body:
          application/json:
            type: lib.BarplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.BarplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /twobytwo:
      post:
        description: Returns data required to create a mosaic plot visualization <br> Java impl- NA <br> R impl- working
        body:
          application/json:
            type: lib.MosaicPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.TwoByTwoPostResponse
          500:
            body:
              application/json:
                type: error.ServerError
                
    /conttable:
      post:
        description: Returns data required to create a mosaic plot visualization <br> Java impl- NA <br> R impl- drafted
        body:
          application/json:
            type: lib.MosaicPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.ContTablePostResponse
          500:
            body:
              application/json:
                type: error.ServerError

  /alphadiv/visualizations:
    displayName: Visualizations for assessing internal sample diversity (alpha diversity).

    /boxplot:
      post:
        description: Returns data required to create a box plot with alpha diversity as dependent axis <br> Java impl- NA <br> R impl- NA
        body:
          application/json:
            type: lib.AlphaDivBoxplotPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.BoxplotPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /scatterplot:
          post:
            description: Returns data required to create a scatterplot that explores the relationship between a continuous variable and alpha diversity <br> Java impl- NA <br> R impl- NA
            body:
              application/json:
                type: lib.AlphaDivScatterplotPostRequest
            responses:
              200:
                body:
                  application/json:
                    type: lib.AlphaDivScatterplotPostResponse
              500:
                body:
                  application/json:
                    type: error.ServerError

  /abundance/visualizations:
      displayName: Visualizations for assessing abundance data in a collection of samples.

      /boxplot:
        post:
          description: Returns data required to create a box plot with abundance as dependent axis <br> Java impl- NA <br> R impl- NA
          body:
            application/json:
              type: lib.AbundanceBoxplotPostRequest
          responses:
            200:
              body:
                application/json:
                  type: lib.BoxplotPostResponse
            500:
              body:
                application/json:
                  type: error.ServerError

      /scatterplot:
            post:
              description: Returns data required to create a scatterplot that explores the relationship between a continuous variable and alpha diversity <br> Java impl- NA <br> R impl- NA
              body:
                application/json:
                  type: lib.AbundanceScatterplotPostRequest
              responses:
                200:
                  body:
                    application/json:
                      type: lib.AbundanceScatterplotPostResponse
                500:
                  body:
                    application/json:
                      type: error.ServerError

  /betadiv/visualizations:
        displayName: Visualizations for exploring the diversity between samples (beta diversity).

        /scatterplot:
              post:
                description: Returns data required to create a scatterplot that explores the differences between samples in a dataset as described by beta diversity <br> Java impl- NA <br> R impl- NA
                body:
                  application/json:
                    type: lib.BetaDivScatterplotPostRequest
                responses:
                  200:
                    body:
                      application/json:
                        type: lib.BetaDivScatterplotPostResponse
                  500:
                    body:
                      application/json:
                        type: error.ServerError

  /sample/visualizations:
    displayName: Sample visualizations demonstrating/testing service capabilities

    /record-count:
      post:
        description: Returns a count of the records in the subset
        body:
          application/json:
            type: lib.RecordCountPostRequest
        responses:
          200:
            body:
              application/json:
                type: lib.RecordCountPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

    /multi-stream:
      post:
        description: Returns a stream of records with its first two attributes (combined from parallel streams)
        body:
          application/json:
            type: lib.MultiStreamPostRequest
        responses:
          200:
            body:
              text/plain:
                type: lib.EntityTabularPostResponse
          500:
            body:
              application/json:
                type: error.ServerError

##################################################
# Pass-Through Endpoints to Subsetting Service
##################################################

/studies:
  displayName: Available Studies
  get:
    responses:
      200:
        body:
          application/json:
            type: lib.StudiesGetResponse

  /clear-metadata-cache:
    displayName: Clears the metadata cache; useful if new data has been loaded into the database
    get:
      responses:
        202:

  /{study-id}:
    uriParameters:
      study-id:
        description: ID of the study of interest
        type: string
    get:
      responses:
        200:
          body:
            application/json:
              type: lib.StudyIdGetResponse

    /entities:

      /{entity-id}:
        uriParameters:
          entity-id:
            description: ID of the entity of interest
            type: string
        get:
          description: Returns entity details, not including its children (which it may or may not have; see study endpoint)
          responses:
            200:
              body:
                application/json:
                  type: lib.EntityIdGetResponse

        /count:
          post:
            securedBy: header-auth
            description: |
              Return a count of entities in this subset.  In the request, `filters` must be a subclass of [Filter](#type:lib.Filter)
            body:
              application/json:
                type: lib.EntityCountPostRequest
            responses:
              200:
                body:
                  application/json:
                    type: lib.EntityCountPostResponse
              401:
                body:
                  application/json:
                    type: error.UnauthorizedError
              500:
                body:
                  application/json:
                    type: error.ServerError

        /variables:

          /{variable-id}:

            /distribution:
              post:
                securedBy: header-auth
                description: |
                  Return the count of entities in the subset that have a value for this variable, and |
                  a distribution for this variable, i.e., entity counts for each value of this |
                  variable.  In the request, `filters` must be a subclass of [Filter](#type:lib.Filter)
                body:
                  application/json:
                    type: lib.VariableDistributionPostRequest
                responses:
                  200:
                    body:
                      application/json:
                        type: lib.VariableDistributionPostResponse
                  401:
                    body:
                      application/json:
                        type: error.UnauthorizedError
                  500:
                    body:
                      application/json:
                        type: error.ServerError
